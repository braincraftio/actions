name: Reusable Container Build Workflow

on:
  workflow_call:
    inputs:
      image-name:
        description: "Full image name (e.g., ghcr.io/owner/repo)"
        required: true
        type: string
      context:
        description: "Build context path"
        required: false
        type: string
        default: "."
      dockerfile:
        description: "Path to Dockerfile"
        required: false
        type: string
        default: "./Dockerfile"
      tags:
        description: "List of tags (docker/metadata-action format)"
        required: false
        type: string
        default: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
      platforms:
        description: "Target platforms (comma-separated)"
        required: false
        type: string
        default: "linux/amd64,linux/arm64"
      single-platform:
        description: "Build only for amd64 (faster for testing)"
        required: false
        type: boolean
        default: false
      push:
        description: "Push image to registry"
        required: false
        type: boolean
        default: true
      github-token:
        description: "GitHub token for authentication (defaults to GITHUB_TOKEN)"
        required: false
        type: string
        default: ${{ github.token }}
      calling-repository:
        description: "The repository that called this workflow (for cosign verification)"
        required: false
        type: string
        default: ''
      verify-signatures:
        description: "Whether to verify signatures after push"
        required: false
        type: boolean
        default: true

permissions:
  contents: read
  packages: write
  id-token: write # Required for OIDC signing with cosign

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      metadata: ${{ steps.meta.outputs.json }}
      image-name: ${{ inputs.image-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: --debug
          config-inline: |
            [worker.oci]
              max-parallelism = 4

      - name: Log in to GitHub Container Registry
        if: inputs.push
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN || inputs.github-token }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.image-name }}
          tags: ${{ inputs.tags }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: ${{ inputs.single-platform && 'linux/amd64' || inputs.platforms }}
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ inputs.image-name }}:buildcache
            type=registry,ref=${{ inputs.image-name }}:devcontainer-latest
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ inputs.image-name }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            DOCKER_BUILDKIT=1
          provenance: true
          sbom: true

      - name: Install cosign
        if: inputs.push
        uses: sigstore/cosign-installer@v3

      - name: Install syft
        if: inputs.push
        uses: anchore/sbom-action/download-syft@v0

      - name: Generate SBOM
        if: inputs.push
        run: |
          syft \
            "${{ inputs.image-name }}@${{ steps.build.outputs.digest }}" \
            -o spdx-json \
            --file sbom.spdx.json

      - name: Sign container image with cosign
        if: inputs.push
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "Signing image with keyless OIDC signing..."
          cosign sign --yes \
            "${{ inputs.image-name }}@${{ steps.build.outputs.digest }}"

      - name: Attach SBOM to image
        if: inputs.push
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "Attaching SBOM to image..."
          cosign attach sbom \
            --sbom sbom.spdx.json \
            "${{ inputs.image-name }}@${{ steps.build.outputs.digest }}"

      - name: Sign SBOM
        if: inputs.push
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "Signing SBOM..."
          cosign sign --yes \
            --attachment sbom \
            "${{ inputs.image-name }}@${{ steps.build.outputs.digest }}"

      - name: Upload SBOM artifact
        if: inputs.push
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.spdx.json
          retention-days: 90

      - name: Summary
        if: always()
        run: |
          echo "## Container Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ inputs.push }}" == "true" ]]; then
            echo "‚úÖ **Image Published**" >> $GITHUB_STEP_SUMMARY
            echo "- Digest: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Tags:" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.meta.outputs.tags }}" | while read tag; do
              echo "  - \`$tag\`" >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Signatures" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Container image signed with cosign" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ SBOM attached and signed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Verification" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Verify with the reusable workflow identity" >> $GITHUB_STEP_SUMMARY
            echo "cosign verify --certificate-identity-regexp 'https://github.com/braincraftio/actions/.github/workflows/container-build.yml@.+' --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' ${{ inputs.image-name }}@${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "üèóÔ∏è **Image Built (not pushed)**" >> $GITHUB_STEP_SUMMARY
            echo "- Platforms: ${{ inputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          fi

  # Run verification as a separate, non-blocking job
  verify:
    needs: build
    runs-on: ubuntu-latest
    if: inputs.push && inputs.verify-signatures
    continue-on-error: true # Make this job non-blocking
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Verify signatures post-build
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          echo "üîç Running post-build signature verification..."
          echo "This is a non-blocking verification step for monitoring purposes."
          
          # Try multiple identity patterns to handle various scenarios
          IDENTITIES=(
            "https://github.com/braincraftio/actions/.github/workflows/container-build.yml@refs/heads/main"
            "https://github.com/braincraftio/actions/.github/workflows/container-build.yml@.+"
            "https://github.com/braincraftio/containers/.github/workflows/container-build.yml@.+"
          )
          
          IMAGE="${{ needs.build.outputs.image-name }}@${{ needs.build.outputs.image-digest }}"
          
          echo "Attempting to verify image: $IMAGE"
          
          for identity in "${IDENTITIES[@]}"; do
            echo ""
            echo "Trying identity pattern: $identity"
            if cosign verify \
              --certificate-identity-regexp "$identity" \
              --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
              "$IMAGE" 2>/dev/null; then
              echo "‚úÖ Verification successful with identity: $identity"
              exit 0
            fi
          done
          
          echo ""
          echo "‚ö†Ô∏è  Could not verify with any known identity pattern."
          echo "This may indicate the image was built before signing was implemented."
          echo "Future builds will have proper signatures."
